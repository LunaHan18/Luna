<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Circles</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
        }

        #circle-container {
            position: relative;
            height: 100vh;
            margin: 0 300px;
            background-color: #f0f0f0;
        }

        .circle {
            position: absolute;
            border-radius: 50%;
            background-color: #3498db;
            cursor: pointer;
            transition: all 0.3s ease-in-out;
        }

        #tag-container {
            text-align: center;
            padding: 20px;
        }

        .tag {
            display: inline-block;
            margin: 0 10px;
            padding: 5px 10px;
            background-color: #2ecc71;
            color: #fff;
            cursor: pointer;
        }

        #clear-button {
            margin-top: 10px;
            padding: 5px 10px;
            background-color: #e74c3c;
            color: #fff;
            cursor: pointer;
        }
    </style>
</head>
<body>

<div id="tag-container">
    <div class="tag" onclick="filterCircles('tag1')">Tag 1</div>
    <div class="tag" onclick="filterCircles('tag2')">Tag 2</div>
    <div class="tag" onclick="filterCircles('tag3')">Tag 3</div>
    <!-- Add more tags as needed -->
    <div id="clear-button" onclick="clearFilters()">Clear</div>
</div>

<div id="circle-container"></div>

<script>
    const circleContainer = document.getElementById('circle-container');
    const tags = ['tag1', 'tag2', 'tag3']; // Add more tags as needed
    const separationFactor = 1.5; // Adjust as needed
    const margin = 300; // Adjust as needed

    // Generate random circles
    for (let i = 0; i < 30; i++) {
        createCircle();
    }

    function createCircle() {
        const circle = document.createElement('div');
        circle.className = 'circle';
        circle.style.width = getRandomSize() + 'px';
        circle.style.height = circle.style.width;

        // Set position in a circular pattern
        const angle = (i / 30) * Math.PI * 2;
        const radius = 120;
        const centerX = window.innerWidth / 2;
        const centerY = window.innerHeight / 2;
        const x = centerX + radius * Math.cos(angle);
        const y = centerY + radius * Math.sin(angle);
        circle.style.left = x + 'px';
        circle.style.top = y + 'px';

        // Assign random tags to circles
        circle.setAttribute('data-tags', getRandomTags());

        // Add click event listener to each circle
        circle.addEventListener('click', () => {
            alert('Circle clicked! Tags: ' + circle.getAttribute('data-tags'));
        });

        circleContainer.appendChild(circle);
    }

    function getRandomSize() {
        return Math.floor(Math.random() * 50) + 20; // Adjust as needed
    }

    function getRandomTags() {
        const randomTags = [];
        for (let i = 0; i < Math.floor(Math.random() * tags.length) + 1; i++) {
            randomTags.push(tags[Math.floor(Math.random() * tags.length)]);
        }
        return randomTags.join(' ');
    }

    function filterCircles(tag) {
        const circles = document.querySelectorAll('.circle');
        let xOffset = 0;
        let yOffset = 0;

        circles.forEach(circle => {
            circle.style.transition = 'all 0.3s ease-in-out'; // Restore transition
            const circleTags = circle.getAttribute('data-tags').split(' ');

            if (circleTags.includes(tag)) {
                circle.style.width = '100px'; // Adjust as needed
                circle.style.height = '100px';
            } else {
                circle.style.width = '30px'; // Adjust as needed
                circle.style.height = '30px';
            }

            // Position the circle without changing its position during filtering
            circle.style.left = parseFloat(circle.style.left) - xOffset + 'px';
            circle.style.top = parseFloat(circle.style.top) - yOffset + 'px';

            xOffset += 120 * separationFactor; // Adjust as needed
            if (xOffset + circle.offsetWidth > window.innerWidth - margin * 2) {
                xOffset = 0;
                yOffset += 120 * separationFactor;
            }

            // Adjust the circle position after filtering
            circle.style.left = parseFloat(circle.style.left) + xOffset + 'px';
            circle.style.top = parseFloat(circle.style.top) + yOffset + 'px';
        });
    }

    function clearFilters() {
        const circles = document.querySelectorAll('.circle');
        circles.forEach(circle => {
            circle.style.transition = 'all 0.3s ease-in-out'; // Restore transition
            circle.style.width = getRandomSize() + 'px';
            circle.style.height = circle.style.width;
            circle.style.left = parseFloat(circle.style.left) + 'px';
            circle.style.top = parseFloat(circle.style.top) + 'px';
        });
    }
</script>

</body>
</html>
